PRAGMA foreign_keys = ON;

-- USERS
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    nickname TEXT UNIQUE,
    email TEXT UNIQUE NOT NULL,
    password TEXT NOT NULL,
    firstName TEXT NOT NULL,
    lastName TEXT NOT NULL,
    dateOfBirth DATETIME NOT NULL,
    avatar TEXT,
    about TEXT
);

-- POSTS
CREATE TABLE IF NOT EXISTS posts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    image TEXT,
    privacy TEXT,
    groupId INTEGER REFERENCES groups(id) ON DELETE CASCADE,
    creatorId INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    createdAt DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- COMMENTS
CREATE TABLE IF NOT EXISTS comments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    postId INTEGER NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
    userId INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    image TEXT,
    createdAt DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- GROUPS
CREATE TABLE IF NOT EXISTS groups (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    description TEXT,
    adminId INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    createdAt DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- GROUP MEMBERS
CREATE TABLE IF NOT EXISTS groupsMembers (
    memberId INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    groupId INTEGER NOT NULL REFERENCES groups(id) ON DELETE CASCADE,
    PRIMARY KEY (memberId, groupId)
);

-- EVENTS
CREATE TABLE IF NOT EXISTS events (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    description TEXT,
    eventDate DATETIME,
    createdAt DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- EVENT ATTENDANCE
CREATE TABLE IF NOT EXISTS eventsAttendance (
    memberId INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    eventId INTEGER NOT NULL REFERENCES events(id) ON DELETE CASCADE,
    isGoing BOOLEAN,
    PRIMARY KEY (memberId, eventId)
);

-- FOLLOWERS
CREATE TABLE IF NOT EXISTS followers (
    followerId INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    followedId INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    PRIMARY KEY (followerId, followedId)
);

-- POST REACTIONS
CREATE TABLE IF NOT EXISTS postReactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    postId INTEGER NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
    userId INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    reactionType INTEGER NOT NULL CHECK (reactionType IN (-1, 0, 1)),
    UNIQUE(postId, userId)
);

-- COMMENT REACTIONS
CREATE TABLE IF NOT EXISTS commentReactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    commentId INTEGER NOT NULL REFERENCES comments(id) ON DELETE CASCADE,
    userId INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    reactionType INTEGER NOT NULL CHECK (reactionType IN (-1, 0, 1)),
    UNIQUE(commentId, userId)
);

-- MESSAGES
CREATE TABLE IF NOT EXISTS messages (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    senderId INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    receiverId INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    sentAt DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- SESSIONS
CREATE TABLE IF NOT EXISTS sessions (
    id TEXT PRIMARY KEY,
    userId INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    expiresAt DATETIME NOT NULL
);

-- Notification
CREATE TABLE IF NOT EXISTS Notifications (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    senderId INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    receiverId INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    type TEXT NOT NULL CHECK (type IN ('follow_request', 'group_invite', 'group_join_request', 'new_event')),
    status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'accepted', 'refused')),
    notificationDate DATETIME NOT NULL
);

--GroupMessages
CREATE TABLE IF NOT EXISTS groupMessages (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    groupId INTEGER NOT NULL REFERENCES groups(id) ON DELETE CASCADE,
    senderId INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    sentAt DATETIME DEFAULT CURRENT_TIMESTAMP
);
